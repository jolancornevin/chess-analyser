{"ast":null,"code":"var _jsxFileName = \"/Users/jcornevin/Dev/Perso/chess-analyser/src/components/right-menu/right-menu.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { Line } from \"../types\";\nimport { engineEval } from \"./engine\";\nimport { Lines } from \"./lines\";\nimport { Moves } from \"./moves\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function RightMenu({\n  chess,\n  setFen,\n  orientation,\n  setOrientation\n}) {\n  _s();\n  const [moves, setMoves] = useState([]);\n  const [lines, setLines] = useState([]);\n  const [loading, setLoading] = useState(null);\n\n  // Load a game\n  const onPGNChange = useCallback(async pgn => {\n    chess.loadPgn(pgn);\n    setFen(chess.fen());\n    const moves = [];\n    let index = 0;\n    const nbMoves = chess.history().length;\n\n    // start computing every move.\n    for (const value of chess.history({\n      verbose: true\n    })) {\n      let _index = index;\n      await engineEval(value.before, 3).then(async linesBefore => {\n        bestLineBefore = linesBefore.length > 0 ? linesBefore[0] : Line();\n        winPercentageAfter = 50 + 50 * (2 / (1 + Math.exp(-0.00368208 * centipawns) - 1));\n        engineEval(value.before, 3).then(linesAfter => {\n          winPercentageAfter = 50 + 50 * (2 / (1 + Math.exp(-0.00368208 * centipawns) - 1));\n          accuracy = 103.1668 * Math.exp(-0.04354 * (winPercentBefore - winPercentAfter)) - 3.1669;\n\n          // TODO think more about the evals I want\n          // I need to compare the score AFTER the move VS the best line BEFORE the move (+all other metrics)\n          // If I want a graph, then I want the best score BEFORE each move. \n          moves.push({\n            to: value.to,\n            fen: value.after,\n            number: Math.floor(_index / 2),\n            eval: linesBefore.length > 0 ? linesBefore[0].score : \"-\"\n          });\n        });\n      });\n      setLoading(`${index}/${nbMoves}`);\n      index += 1;\n    }\n    setMoves(moves);\n    setLoading(null);\n  }, [chess, setFen]);\n\n  // Load a move\n  const onMoveClick = useCallback(async move => {\n    setFen(move.fen);\n    chess.load(move.fen);\n    setLines([]);\n    await engineEval(move.fen, 3).then(lines => setLines(lines));\n  }, [chess, setFen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        border: \"1px solid white\"\n      },\n      children: [\"PGN: \", /*#__PURE__*/_jsxDEV(\"textarea\", {\n        onChange: async e => await onPGNChange(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 22\n      }, this), \"Direction: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: orientation === \"white\",\n        onChange: e => {\n          console.log(e.target.value);\n          setOrientation(e.target.checked ? \"white\" : \"black\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8,\n        border: \"1px solid white\",\n        height: 700\n      },\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Analyzing the game \", loading]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Lines, {\n          lines: lines\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Moves, {\n          moves: moves,\n          onMoveClick: onMoveClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n_s(RightMenu, \"T1S6vhgCwmPlomy29umNuyLLw98=\");\n_c = RightMenu;\nvar _c;\n$RefreshReg$(_c, \"RightMenu\");","map":{"version":3,"names":["useCallback","useState","Line","engineEval","Lines","Moves","jsxDEV","_jsxDEV","Fragment","_Fragment","RightMenu","chess","setFen","orientation","setOrientation","_s","moves","setMoves","lines","setLines","loading","setLoading","onPGNChange","pgn","loadPgn","fen","index","nbMoves","history","length","value","verbose","_index","before","then","linesBefore","bestLineBefore","winPercentageAfter","Math","exp","centipawns","linesAfter","accuracy","winPercentBefore","winPercentAfter","push","to","after","number","floor","eval","score","onMoveClick","move","load","children","style","flex","border","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","console","log","marginTop","height","_c","$RefreshReg$"],"sources":["/Users/jcornevin/Dev/Perso/chess-analyser/src/components/right-menu/right-menu.tsx"],"sourcesContent":["import { useCallback, useState } from \"react\";\n\nimport { Chess } from 'chess.js';\nimport { Line, Move } from \"../types\";\nimport { engineEval } from \"./engine\";\nimport { Lines } from \"./lines\";\nimport { Moves } from \"./moves\";\n\ndeclare const colors: readonly [\"white\", \"black\"];\ndeclare type Color = typeof colors[number];\n\ninterface RightMenuProps {\n    chess: Chess;\n\n    setFen: React.Dispatch<React.SetStateAction<string>>;\n\n    orientation: Color;\n    setOrientation: React.Dispatch<React.SetStateAction<Color>>;\n}\n\nexport function RightMenu({chess, setFen, orientation, setOrientation }: RightMenuProps): JSX.Element {\n    const [moves, setMoves] = useState<Move[]>([]);\n    const [lines, setLines] = useState<Line[]>([]);\n    const [loading, setLoading] = useState<string|null>(null);\n\n    // Load a game\n    const onPGNChange = useCallback(async (pgn: string) => {\n        chess.loadPgn(pgn);\n        setFen(chess.fen());\n\n        const moves: Move[] = [];\n        let index = 0;\n\n        const nbMoves = chess.history().length;\n\n        // start computing every move.\n        for (const value of chess.history({ verbose: true })) {\n            let _index = index;\n\n            await engineEval(value.before, 3).then(async (linesBefore) => {\n                bestLineBefore = linesBefore.length > 0 ? linesBefore[0] : Line();\n                winPercentageAfter = 50 + 50 * (2 / (1 + Math.exp((-0.00368208 * centipawns)) - 1));\n\n                engineEval(value.before, 3).then((linesAfter) => {\n\n                    winPercentageAfter = 50 + 50 * (2 / (1 + Math.exp((-0.00368208 * centipawns)) - 1));\n                    accuracy = 103.1668 * Math.exp(-0.04354 * (winPercentBefore - winPercentAfter)) - 3.1669\n\n                    // TODO think more about the evals I want\n                    // I need to compare the score AFTER the move VS the best line BEFORE the move (+all other metrics)\n                    // If I want a graph, then I want the best score BEFORE each move. \n                    moves.push(\n                        {\n                            to: value.to,\n                            fen: value.after,\n                            number: Math.floor(_index / 2),\n                            eval: (linesBefore.length > 0 ? linesBefore[0].score : \"-\")\n                        }\n                    )\n                });         \n            });            \n\n            setLoading(`${index}/${nbMoves}`);\n            index += 1;\n        }\n        setMoves(moves);\n        setLoading(null);\n        \n    }, [chess, setFen]);\n\n    // Load a move\n    const onMoveClick = useCallback(async (move: Move) => {\n        setFen(move.fen);\n        chess.load(move.fen);\n        setLines([]);\n        \n        await engineEval(move.fen, 3).then((lines) => setLines(lines));\n    }, [chess, setFen]);\n\n    return (\n        <div>\n            <div style={{ flex: 1, border: \"1px solid white\" }}>\n                {/* Fen: <input value={fen} onChange={e => setFen(e.target.value)} /> */}\n                PGN: <textarea onChange={async (e) => await onPGNChange(e.target.value)} />\n                Direction: <input type=\"checkbox\" checked={orientation === \"white\"} onChange={e => {console.log(e.target.value); setOrientation(e.target.checked ? \"white\": \"black\")}} />\n            </div>\n            <div style={{ marginTop: 8, border: \"1px solid white\", height: 700}}>\n                {\n                    loading ?\n                    <div>Analyzing the game {loading}</div>:\n                    <>\n                        <Lines lines={lines} />\n                        <Moves moves={moves} onMoveClick={onMoveClick} />\n                    </>\n                }\n            </div>            \n        </div>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}