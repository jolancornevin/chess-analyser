{"ast":null,"code":"var _jsxFileName = \"/Users/jcornevin/Dev/Perso/chess-analyser/src/components/right-menu/right-menu.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { engineEval } from \"./engine\";\nimport { Lines } from \"./lines\";\nimport { Moves } from \"./moves\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function RightMenu({\n  chess,\n  setFen,\n  orientation,\n  setOrientation\n}) {\n  _s();\n  const [moves, setMoves] = useState([]);\n  const [lines, setLines] = useState([]);\n\n  // Load a game\n  const onPGNChange = useCallback(async pgn => {\n    chess.loadPgn(pgn);\n    setFen(chess.fen());\n    console.log({\n      chess\n    });\n    let moves = [];\n    let index = 0;\n    // start computing every move.\n    for (const value of chess.history({\n      verbose: true\n    })) {\n      let _index = index;\n      await engineEval(value.before, 3).then(lines => {\n        // TODO think more about the evals I want\n        // I need to compare the score AFTER the move VS the best line BEFORE the move (+all other metrics)\n        // If I want a graph, then I want the best score BEFORE each move. \n        moves.push({\n          to: value.to,\n          fen: value.after,\n          number: Math.floor(_index / 2),\n          eval: lines.length > 0 ? lines[0].score : \"-\"\n        });\n      });\n      index += 1;\n    }\n    setMoves(moves);\n  }, [chess, setFen]);\n\n  // Load a move\n  const onMoveClick = useCallback(async move => {\n    setFen(move.fen);\n    chess.load(move.fen);\n    setLines([]);\n    await engineEval(move.fen, 3).then(lines => setLines(lines));\n  }, [chess, setFen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {},\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1\n      },\n      children: [\"PGN: \", /*#__PURE__*/_jsxDEV(\"textarea\", {\n        onChange: async e => await onPGNChange(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 22\n      }, this), \"Direction: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: orientation === \"white\",\n        onChange: e => {\n          console.log(e.target.value);\n          setOrientation(e.target.checked ? \"white\" : \"black\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Lines, {\n      lines: lines\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Moves, {\n      moves: moves,\n      onMoveClick: onMoveClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n_s(RightMenu, \"RUZNJ41DH5L7t1R5SsGd/7sluZo=\");\n_c = RightMenu;\nvar _c;\n$RefreshReg$(_c, \"RightMenu\");","map":{"version":3,"names":["useCallback","useState","engineEval","Lines","Moves","jsxDEV","_jsxDEV","RightMenu","chess","setFen","orientation","setOrientation","_s","moves","setMoves","lines","setLines","onPGNChange","pgn","loadPgn","fen","console","log","index","value","history","verbose","_index","before","then","push","to","after","number","Math","floor","eval","length","score","onMoveClick","move","load","style","children","flex","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","_c","$RefreshReg$"],"sources":["/Users/jcornevin/Dev/Perso/chess-analyser/src/components/right-menu/right-menu.tsx"],"sourcesContent":["import { useCallback, useState } from \"react\";\n\nimport { Chess } from 'chess.js';\nimport { Line, Move } from \"../types\";\nimport { engineEval } from \"./engine\";\nimport { Lines } from \"./lines\";\nimport { Moves } from \"./moves\";\n\ndeclare const colors: readonly [\"white\", \"black\"];\ndeclare type Color = typeof colors[number];\n\ninterface RightMenuProps {\n    chess: Chess;\n\n    setFen: React.Dispatch<React.SetStateAction<string>>;\n\n    orientation: Color;\n    setOrientation: React.Dispatch<React.SetStateAction<Color>>;\n}\n\nexport function RightMenu({chess, setFen, orientation, setOrientation }: RightMenuProps): JSX.Element {\n    const [moves, setMoves] = useState<Move[]>([]);\n    const [lines, setLines] = useState<Line[]>([]);\n\n    // Load a game\n    const onPGNChange = useCallback(async (pgn: string) => {\n        chess.loadPgn(pgn);\n        setFen(chess.fen());\n        console.log({ chess });\n\n        let moves: Move[] = [];\n        let index = 0;\n        // start computing every move.\n        for (const value of chess.history({ verbose: true })) {\n            let _index = index;\n\n            await engineEval(value.before, 3).then((lines) => {\n                // TODO think more about the evals I want\n                // I need to compare the score AFTER the move VS the best line BEFORE the move (+all other metrics)\n                // If I want a graph, then I want the best score BEFORE each move. \n                moves.push(\n                    {\n                        to: value.to,\n                        fen: value.after,\n                        number: Math.floor(_index / 2),\n                        eval: (lines.length > 0 ? lines[0].score : \"-\")\n                    }\n                )\n            });            \n\n            index += 1;\n        }\n        setMoves(moves);\n        \n    }, [chess, setFen]);\n\n    // Load a move\n    const onMoveClick = useCallback(async (move: Move) => {\n        setFen(move.fen);\n        chess.load(move.fen);\n        setLines([]);\n        \n        await engineEval(move.fen, 3).then((lines) => setLines(lines));\n    }, [chess, setFen]);\n\n    return (\n        <div style={{  }}>\n            <div style={{ flex: 1 }}>\n                {/* Fen: <input value={fen} onChange={e => setFen(e.target.value)} /> */}\n                PGN: <textarea onChange={async (e) => await onPGNChange(e.target.value)} />\n                Direction: <input type=\"checkbox\" checked={orientation === \"white\"} onChange={e => {console.log(e.target.value); setOrientation(e.target.checked ? \"white\": \"black\")}} />\n            </div>\n\n            <Lines lines={lines} />\n\n            <Moves moves={moves} onMoveClick={onMoveClick} />\n        </div>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}