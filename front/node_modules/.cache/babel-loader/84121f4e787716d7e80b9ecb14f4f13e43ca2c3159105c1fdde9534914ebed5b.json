{"ast":null,"code":"export const ENGINE_DEPTH = 10;\nconst META = {\n  engine: null\n};\nexport function getEngine() {\n  if (META.engine) {\n    return META.engine;\n  }\n  META.engine = eval(\"stockfish\");\n  META.engine.onmessage = event => {\n    let message = event.data;\n    console.log(message);\n  };\n  META.engine.onerror = event => {\n    console.log({\n      event\n    });\n  };\n  return META.engine;\n}\nexport async function searchFromFen(fen, nbLines) {\n  return new Promise((resolve, reject) => {\n    const engine = getEngine();\n    // set number of lines to eval\n    META.engine.postMessage(`setoption name MultiPV value ${nbLines}`);\n    engine.postMessage(`position fen ${fen}`);\n    engine.postMessage(`go depth ${ENGINE_DEPTH}`);\n    const lines = [];\n    engine.onmessage = event => {\n      let message = event.data;\n      if (message.startsWith(`info depth ${ENGINE_DEPTH}`)) {\n        const regx = message.match(`.*score (?<type>cp|mate) (?<score>.*) nodes.* pv (?<moves>.*)`);\n        if (regx && regx.groups !== undefined) {\n          var _regx$groups, _regx$groups2, _regx$groups3;\n          lines.push({\n            score: Number(regx === null || regx === void 0 ? void 0 : (_regx$groups = regx.groups) === null || _regx$groups === void 0 ? void 0 : _regx$groups.score) || 0,\n            scoreType: (regx === null || regx === void 0 ? void 0 : (_regx$groups2 = regx.groups) === null || _regx$groups2 === void 0 ? void 0 : _regx$groups2.type) || \"\",\n            line: (regx === null || regx === void 0 ? void 0 : (_regx$groups3 = regx.groups) === null || _regx$groups3 === void 0 ? void 0 : _regx$groups3.moves) || \"\"\n          });\n          if (lines.length === nbLines) {\n            resolve(lines);\n          }\n        }\n      }\n    };\n  });\n}","map":{"version":3,"names":["ENGINE_DEPTH","META","engine","getEngine","eval","onmessage","event","message","data","console","log","onerror","searchFromFen","fen","nbLines","Promise","resolve","reject","postMessage","lines","startsWith","regx","match","groups","undefined","_regx$groups","_regx$groups2","_regx$groups3","push","score","Number","scoreType","type","line","moves","length"],"sources":["/Users/jcornevin/Dev/Perso/chess-analyser/src/components/right-menu/engine.ts"],"sourcesContent":["import { Line } from \"../types\";\n\nexport const ENGINE_DEPTH = 10;\n\n\nconst META = {\n    engine: null\n}\n\nexport function getEngine() {\n    if (META.engine) {\n        return META.engine\n    }\n\n    META.engine = eval(\"stockfish\");\n\n    META.engine.onmessage = (event: {data: string}) => {\n        let message = event.data;\n        console.log(message)\n    }\n\n    META.engine.onerror = (event: any) => {\n        console.log({event});\n    }\n    \n    return META.engine;\n}\n\nexport async function searchFromFen(fen: string, nbLines: number): Promise<Line[]> {\n\n    return new Promise((resolve, reject) => {\n        const engine = getEngine();\n        // set number of lines to eval\n        META.engine.postMessage(`setoption name MultiPV value ${nbLines}`)\n    \n        engine.postMessage(`position fen ${fen}`);\n        engine.postMessage(`go depth ${ENGINE_DEPTH}`);\n\n        const lines = [];\n            \n        engine.onmessage = (event: {data: string}) => {\n            let message = event.data;\n            if (message.startsWith(`info depth ${ENGINE_DEPTH}`)) {\n                const regx = message.match(`.*score (?<type>cp|mate) (?<score>.*) nodes.* pv (?<moves>.*)`);\n                \n                if (regx && regx.groups !== undefined) {\n                    lines.push({\n                        score: Number(regx?.groups?.score) || 0,\n                        scoreType: regx?.groups?.type || \"\",\n                        line: regx?.groups?.moves || \"\",\n                    })\n\n                    if (lines.length === nbLines) {\n                        resolve(lines)\n                    }\n                } \n            }\n        }\n    });\n}"],"mappings":"AAEA,OAAO,MAAMA,YAAY,GAAG,EAAE;AAG9B,MAAMC,IAAI,GAAG;EACTC,MAAM,EAAE;AACZ,CAAC;AAED,OAAO,SAASC,SAASA,CAAA,EAAG;EACxB,IAAIF,IAAI,CAACC,MAAM,EAAE;IACb,OAAOD,IAAI,CAACC,MAAM;EACtB;EAEAD,IAAI,CAACC,MAAM,GAAGE,IAAI,CAAC,WAAW,CAAC;EAE/BH,IAAI,CAACC,MAAM,CAACG,SAAS,GAAIC,KAAqB,IAAK;IAC/C,IAAIC,OAAO,GAAGD,KAAK,CAACE,IAAI;IACxBC,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC;EACxB,CAAC;EAEDN,IAAI,CAACC,MAAM,CAACS,OAAO,GAAIL,KAAU,IAAK;IAClCG,OAAO,CAACC,GAAG,CAAC;MAACJ;IAAK,CAAC,CAAC;EACxB,CAAC;EAED,OAAOL,IAAI,CAACC,MAAM;AACtB;AAEA,OAAO,eAAeU,aAAaA,CAACC,GAAW,EAAEC,OAAe,EAAmB;EAE/E,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,MAAMf,MAAM,GAAGC,SAAS,CAAC,CAAC;IAC1B;IACAF,IAAI,CAACC,MAAM,CAACgB,WAAW,CAAC,gCAAgCJ,OAAO,EAAE,CAAC;IAElEZ,MAAM,CAACgB,WAAW,CAAC,gBAAgBL,GAAG,EAAE,CAAC;IACzCX,MAAM,CAACgB,WAAW,CAAC,YAAYlB,YAAY,EAAE,CAAC;IAE9C,MAAMmB,KAAK,GAAG,EAAE;IAEhBjB,MAAM,CAACG,SAAS,GAAIC,KAAqB,IAAK;MAC1C,IAAIC,OAAO,GAAGD,KAAK,CAACE,IAAI;MACxB,IAAID,OAAO,CAACa,UAAU,CAAC,cAAcpB,YAAY,EAAE,CAAC,EAAE;QAClD,MAAMqB,IAAI,GAAGd,OAAO,CAACe,KAAK,CAAC,+DAA+D,CAAC;QAE3F,IAAID,IAAI,IAAIA,IAAI,CAACE,MAAM,KAAKC,SAAS,EAAE;UAAA,IAAAC,YAAA,EAAAC,aAAA,EAAAC,aAAA;UACnCR,KAAK,CAACS,IAAI,CAAC;YACPC,KAAK,EAAEC,MAAM,CAACT,IAAI,aAAJA,IAAI,wBAAAI,YAAA,GAAJJ,IAAI,CAAEE,MAAM,cAAAE,YAAA,uBAAZA,YAAA,CAAcI,KAAK,CAAC,IAAI,CAAC;YACvCE,SAAS,EAAE,CAAAV,IAAI,aAAJA,IAAI,wBAAAK,aAAA,GAAJL,IAAI,CAAEE,MAAM,cAAAG,aAAA,uBAAZA,aAAA,CAAcM,IAAI,KAAI,EAAE;YACnCC,IAAI,EAAE,CAAAZ,IAAI,aAAJA,IAAI,wBAAAM,aAAA,GAAJN,IAAI,CAAEE,MAAM,cAAAI,aAAA,uBAAZA,aAAA,CAAcO,KAAK,KAAI;UACjC,CAAC,CAAC;UAEF,IAAIf,KAAK,CAACgB,MAAM,KAAKrB,OAAO,EAAE;YAC1BE,OAAO,CAACG,KAAK,CAAC;UAClB;QACJ;MACJ;IACJ,CAAC;EACL,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}