{"ast":null,"code":"import { pos2key, invRanks } from './util.js';\nimport * as cg from './types.js';\nexport const initial = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';\nconst roles = {\n  p: 'pawn',\n  r: 'rook',\n  n: 'knight',\n  b: 'bishop',\n  q: 'queen',\n  k: 'king'\n};\nconst letters = {\n  pawn: 'p',\n  rook: 'r',\n  knight: 'n',\n  bishop: 'b',\n  queen: 'q',\n  king: 'k'\n};\nexport function read(fen) {\n  if (fen === 'start') fen = initial;\n  const pieces = new Map();\n  let row = 7,\n    col = 0;\n  for (const c of fen) {\n    switch (c) {\n      case ' ':\n      case '[':\n        return pieces;\n      case '/':\n        --row;\n        if (row < 0) return pieces;\n        col = 0;\n        break;\n      case '~':\n        {\n          const piece = pieces.get(pos2key([col - 1, row]));\n          if (piece) piece.promoted = true;\n          break;\n        }\n      default:\n        {\n          const nb = c.charCodeAt(0);\n          if (nb < 57) col += nb - 48;else {\n            const role = c.toLowerCase();\n            pieces.set(pos2key([col, row]), {\n              role: roles[role],\n              color: c === role ? 'black' : 'white'\n            });\n            ++col;\n          }\n        }\n    }\n  }\n  return pieces;\n}\nexport function write(pieces) {\n  return invRanks.map(y => cg.files.map(x => {\n    const piece = pieces.get(x + y);\n    if (piece) {\n      let p = letters[piece.role];\n      if (piece.color === 'white') p = p.toUpperCase();\n      if (piece.promoted) p += '~';\n      return p;\n    } else return '1';\n  }).join('')).join('/').replace(/1{2,}/g, s => s.length.toString());\n}","map":{"version":3,"names":["pos2key","invRanks","cg","initial","roles","p","r","n","b","q","k","letters","pawn","rook","knight","bishop","queen","king","read","fen","pieces","Map","row","col","c","piece","get","promoted","nb","charCodeAt","role","toLowerCase","set","color","write","map","y","files","x","toUpperCase","join","replace","s","length","toString"],"sources":["/Users/jcornevin/Dev/Perso/chess-analyser/node_modules/chessground/src/fen.ts"],"sourcesContent":["import { pos2key, invRanks } from './util.js';\nimport * as cg from './types.js';\n\nexport const initial: cg.FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';\n\nconst roles: { [letter: string]: cg.Role } = {\n  p: 'pawn',\n  r: 'rook',\n  n: 'knight',\n  b: 'bishop',\n  q: 'queen',\n  k: 'king',\n};\n\nconst letters = {\n  pawn: 'p',\n  rook: 'r',\n  knight: 'n',\n  bishop: 'b',\n  queen: 'q',\n  king: 'k',\n};\n\nexport function read(fen: cg.FEN): cg.Pieces {\n  if (fen === 'start') fen = initial;\n  const pieces: cg.Pieces = new Map();\n  let row = 7,\n    col = 0;\n  for (const c of fen) {\n    switch (c) {\n      case ' ':\n      case '[':\n        return pieces;\n      case '/':\n        --row;\n        if (row < 0) return pieces;\n        col = 0;\n        break;\n      case '~': {\n        const piece = pieces.get(pos2key([col - 1, row]));\n        if (piece) piece.promoted = true;\n        break;\n      }\n      default: {\n        const nb = c.charCodeAt(0);\n        if (nb < 57) col += nb - 48;\n        else {\n          const role = c.toLowerCase();\n          pieces.set(pos2key([col, row]), {\n            role: roles[role],\n            color: c === role ? 'black' : 'white',\n          });\n          ++col;\n        }\n      }\n    }\n  }\n  return pieces;\n}\n\nexport function write(pieces: cg.Pieces): cg.FEN {\n  return invRanks\n    .map(y =>\n      cg.files\n        .map(x => {\n          const piece = pieces.get((x + y) as cg.Key);\n          if (piece) {\n            let p = letters[piece.role];\n            if (piece.color === 'white') p = p.toUpperCase();\n            if (piece.promoted) p += '~';\n            return p;\n          } else return '1';\n        })\n        .join('')\n    )\n    .join('/')\n    .replace(/1{2,}/g, s => s.length.toString());\n}\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,QAAQ,QAAQ,WAAW;AAC7C,OAAO,KAAKC,EAAE,MAAM,YAAY;AAEhC,OAAO,MAAMC,OAAO,GAAW,6CAA6C;AAE5E,MAAMC,KAAK,GAAkC;EAC3CC,CAAC,EAAE,MAAM;EACTC,CAAC,EAAE,MAAM;EACTC,CAAC,EAAE,QAAQ;EACXC,CAAC,EAAE,QAAQ;EACXC,CAAC,EAAE,OAAO;EACVC,CAAC,EAAE;CACJ;AAED,MAAMC,OAAO,GAAG;EACdC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,GAAG;EACTC,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE,GAAG;EACXC,KAAK,EAAE,GAAG;EACVC,IAAI,EAAE;CACP;AAED,OAAM,SAAUC,IAAIA,CAACC,GAAW;EAC9B,IAAIA,GAAG,KAAK,OAAO,EAAEA,GAAG,GAAGhB,OAAO;EAClC,MAAMiB,MAAM,GAAc,IAAIC,GAAG,EAAE;EACnC,IAAIC,GAAG,GAAG,CAAC;IACTC,GAAG,GAAG,CAAC;EACT,KAAK,MAAMC,CAAC,IAAIL,GAAG,EAAE;IACnB,QAAQK,CAAC;MACP,KAAK,GAAG;MACR,KAAK,GAAG;QACN,OAAOJ,MAAM;MACf,KAAK,GAAG;QACN,EAAEE,GAAG;QACL,IAAIA,GAAG,GAAG,CAAC,EAAE,OAAOF,MAAM;QAC1BG,GAAG,GAAG,CAAC;QACP;MACF,KAAK,GAAG;QAAE;UACR,MAAME,KAAK,GAAGL,MAAM,CAACM,GAAG,CAAC1B,OAAO,CAAC,CAACuB,GAAG,GAAG,CAAC,EAAED,GAAG,CAAC,CAAC,CAAC;UACjD,IAAIG,KAAK,EAAEA,KAAK,CAACE,QAAQ,GAAG,IAAI;UAChC;;MAEF;QAAS;UACP,MAAMC,EAAE,GAAGJ,CAAC,CAACK,UAAU,CAAC,CAAC,CAAC;UAC1B,IAAID,EAAE,GAAG,EAAE,EAAEL,GAAG,IAAIK,EAAE,GAAG,EAAE,CAAC,KACvB;YACH,MAAME,IAAI,GAAGN,CAAC,CAACO,WAAW,EAAE;YAC5BX,MAAM,CAACY,GAAG,CAAChC,OAAO,CAAC,CAACuB,GAAG,EAAED,GAAG,CAAC,CAAC,EAAE;cAC9BQ,IAAI,EAAE1B,KAAK,CAAC0B,IAAI,CAAC;cACjBG,KAAK,EAAET,CAAC,KAAKM,IAAI,GAAG,OAAO,GAAG;aAC/B,CAAC;YACF,EAAEP,GAAG;;;;;EAKb,OAAOH,MAAM;AACf;AAEA,OAAM,SAAUc,KAAKA,CAACd,MAAiB;EACrC,OAAOnB,QAAQ,CACZkC,GAAG,CAACC,CAAC,IACJlC,EAAE,CAACmC,KAAK,CACLF,GAAG,CAACG,CAAC,IAAG;IACP,MAAMb,KAAK,GAAGL,MAAM,CAACM,GAAG,CAAEY,CAAC,GAAGF,CAAY,CAAC;IAC3C,IAAIX,KAAK,EAAE;MACT,IAAIpB,CAAC,GAAGM,OAAO,CAACc,KAAK,CAACK,IAAI,CAAC;MAC3B,IAAIL,KAAK,CAACQ,KAAK,KAAK,OAAO,EAAE5B,CAAC,GAAGA,CAAC,CAACkC,WAAW,EAAE;MAChD,IAAId,KAAK,CAACE,QAAQ,EAAEtB,CAAC,IAAI,GAAG;MAC5B,OAAOA,CAAC;KACT,MAAM,OAAO,GAAG;EACnB,CAAC,CAAC,CACDmC,IAAI,CAAC,EAAE,CAAC,CACZ,CACAA,IAAI,CAAC,GAAG,CAAC,CACTC,OAAO,CAAC,QAAQ,EAAEC,CAAC,IAAIA,CAAC,CAACC,MAAM,CAACC,QAAQ,EAAE,CAAC;AAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}