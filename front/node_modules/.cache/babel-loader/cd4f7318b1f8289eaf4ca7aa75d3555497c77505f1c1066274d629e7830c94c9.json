{"ast":null,"code":"import { NewLine } from \"../types\";\nexport const ENGINE_DEPTH = 8;\nconst META = {\n  engine: null\n};\nexport async function getEngine() {\n  const engine = eval(\"stockfish\");\n  engine.onerror = event => {\n    console.error({\n      event\n    });\n  };\n  return new Promise(resolve => {\n    engine.postMessage(`isready`);\n    engine.onmessage = event => {\n      let message = event.data;\n      if (message === \"readyok\") {\n        resolve(engine);\n      }\n    };\n  });\n}\n\n// const mutex = new Mutex();\n\nexport async function engineEval(fen, nbLines) {\n  // console.log(\"asking muttex\")\n  // const release = await mutex.acquire();\n  // console.log(\"got muttex\")\n\n  const lines = await _engineEval(fen, nbLines);\n\n  // release();\n  // console.log(\"released muttex\")\n\n  return lines;\n}\nexport async function _engineEval(fen, nbLines) {\n  return new Promise(async (_resolve, reject) => {\n    const lines = [];\n    const resolve = value => {\n      console.log(\"resolving\", value);\n      clearTimeout(t);\n      _resolve(value);\n    };\n\n    // it can happen that there aren't enough lines to match the nbLines. \n    // This is a fallback until I find a better way to detect that the engine is done searching.\n    const t = setTimeout(() => {\n      resolve(lines.sort((a, b) => a.rawScore - b.rawScore));\n    }, 10000);\n    const engine = await getEngine();\n    // set number of lines to eval\n    engine.postMessage(`setoption name MultiPV value ${nbLines}`);\n    engine.postMessage(`ucinewgame`);\n    engine.postMessage(`position fen ${fen}`);\n    engine.postMessage(`go depth ${ENGINE_DEPTH}`);\n    // console.log('-------------');\n\n    engine.onmessage = event => {\n      let message = event.data;\n      // console.log(message);\n\n      if (message.startsWith(`info depth ${ENGINE_DEPTH}`)) {\n        // console.log(message);\n        const regx = message.match(`.*score (?<type>cp|mate) (?<score>.*?) (upperbound|nodes).* pv (?<moves>.*)`);\n\n        // console.debug(\"got line\")\n\n        if (regx && regx.groups !== undefined) {\n          var _regx$groups, _regx$groups2, _regx$groups3;\n          const line = NewLine(Number(regx === null || regx === void 0 ? void 0 : (_regx$groups = regx.groups) === null || _regx$groups === void 0 ? void 0 : _regx$groups.score), regx === null || regx === void 0 ? void 0 : (_regx$groups2 = regx.groups) === null || _regx$groups2 === void 0 ? void 0 : _regx$groups2.type, regx === null || regx === void 0 ? void 0 : (_regx$groups3 = regx.groups) === null || _regx$groups3 === void 0 ? void 0 : _regx$groups3.moves);\n          lines.push(line);\n          if (isNaN(line.rawScore)) {\n            console.error('ERRROR', {\n              line,\n              regx\n            });\n          }\n          if (lines.length === nbLines) {\n            // console.log(\"resolving because all lines\");\n            engine.postMessage(\"stop\");\n            engine.postMessage(\"quit\");\n            lines.sort((a, b) => {\n              // negative value if first < the second argument, zero if ===, and a positive value otherwise.\n              // I want to see the highest score for the line first. Mates are always higher\n\n              // TODO ------> Maybe it has to be evaluated depending on how's playing ???\n\n              if (a.scoreType === \"mate\" && b.scoreType !== \"mate\") {\n                return a.rawScore * 1000;\n              }\n              if (a.scoreType !== \"mate\" && b.scoreType === \"mate\") {\n                return b.rawScore * 1000;\n              }\n              if (a.rawScore < 0) {\n                if (b.rawScore >= 0) {\n                  return 1;\n                } else {\n                  // we want the highest score first (sorting descending instead of ascending)\n                  if (a.rawScore < b.rawScore) {\n                    return 1;\n                  } else if (a.rawScore > b.rawScore) {\n                    return 0;\n                  }\n                }\n              } else {\n                // we want the highest score first (sorting descending instead of ascending)\n                if (a.rawScore < b.rawScore) {\n                  return 1;\n                } else if (a.rawScore > b.rawScore) {\n                  return -1;\n                } else {\n                  return 0;\n                }\n              }\n              return 0;\n            });\n            resolve(lines);\n          }\n        }\n      }\n    };\n  });\n}","map":{"version":3,"names":["NewLine","ENGINE_DEPTH","META","engine","getEngine","eval","onerror","event","console","error","Promise","resolve","postMessage","onmessage","message","data","engineEval","fen","nbLines","lines","_engineEval","_resolve","reject","value","log","clearTimeout","t","setTimeout","sort","a","b","rawScore","startsWith","regx","match","groups","undefined","_regx$groups","_regx$groups2","_regx$groups3","line","Number","score","type","moves","push","isNaN","length","scoreType"],"sources":["/Users/jcornevin/Dev/Perso/chess-analyser/src/components/right-menu/engine.ts"],"sourcesContent":["import { Line, NewLine } from \"../types\";\n\nexport const ENGINE_DEPTH = 8;\n\n\ninterface Engine {\n    postMessage(string): void;\n    onmessage(string): void;\n    onerror(string): void;\n}\n\nconst META = {\n    engine: null\n}\n\nexport async function getEngine(): Promise<Engine> {\n    const engine = eval(\"stockfish\");\n\n    engine.onerror = (event: any) => {\n        console.error({event});\n    }\n\n    return new Promise((resolve) => {\n        engine.postMessage(`isready`);\n        engine.onmessage = (event: { data: string }) => {\n            let message = event.data;\n            if (message === \"readyok\") {\n                resolve(engine);\n            }\n        }\n\n    });\n}\n\n// const mutex = new Mutex();\n\nexport async function engineEval(fen: string, nbLines: number): Promise<Line[]> {\n    // console.log(\"asking muttex\")\n    // const release = await mutex.acquire();\n    // console.log(\"got muttex\")\n\n    const lines = await _engineEval(fen, nbLines);\n\n    // release();\n    // console.log(\"released muttex\")\n\n    return lines;\n}\n\nexport async function _engineEval(fen: string, nbLines: number): Promise<Line[]> {\n    return new Promise(async (_resolve, reject) => {\n        const lines: Line[] = [];\n\n        const resolve = (value: Line[] | PromiseLike<Line[]>) => {\n            console.log(\"resolving\", value);\n            clearTimeout(t);\n            _resolve(value);\n        }\n\n        // it can happen that there aren't enough lines to match the nbLines. \n        // This is a fallback until I find a better way to detect that the engine is done searching.\n        const t = setTimeout(() => {\n            resolve(lines.sort((a, b) => (a.rawScore - b.rawScore)));\n        }, 10000);\n    \n        const engine = await getEngine();\n        // set number of lines to eval\n        engine.postMessage(`setoption name MultiPV value ${nbLines}`)\n    \n        engine.postMessage(`ucinewgame`);\n        engine.postMessage(`position fen ${fen}`);\n        engine.postMessage(`go depth ${ENGINE_DEPTH}`);\n        // console.log('-------------');\n\n            \n        engine.onmessage = (event: { data: string }) => {\n            let message = event.data;\n            // console.log(message);\n\n            if (message.startsWith(`info depth ${ENGINE_DEPTH}`)) {\n                // console.log(message);\n                const regx = message.match(`.*score (?<type>cp|mate) (?<score>.*?) (upperbound|nodes).* pv (?<moves>.*)`);\n\n                // console.debug(\"got line\")\n                \n                if (regx && regx.groups !== undefined) {\n                    const line = NewLine(Number(regx?.groups?.score), regx?.groups?.type, regx?.groups?.moves);\n                    lines.push(line)\n\n                    if (isNaN(line.rawScore)) {\n                        console.error('ERRROR', {line, regx})\n                    }\n\n                    if (lines.length === nbLines) {\n                        // console.log(\"resolving because all lines\");\n                        engine.postMessage(\"stop\");\n                        engine.postMessage(\"quit\");\n                        \n                        lines.sort((a, b) => {\n                            // negative value if first < the second argument, zero if ===, and a positive value otherwise.\n                            // I want to see the highest score for the line first. Mates are always higher\n\n                            // TODO ------> Maybe it has to be evaluated depending on how's playing ???\n\n                            if (a.scoreType === \"mate\" && b.scoreType !== \"mate\") {\n                                return a.rawScore * 1000\n                            }\n                            if (a.scoreType !== \"mate\" && b.scoreType === \"mate\") {\n                                return b.rawScore * 1000\n                            }\n\n                            if (a.rawScore < 0) {\n                                if (b.rawScore >= 0) {\n                                    return 1\n                                } else {\n                                    // we want the highest score first (sorting descending instead of ascending)\n                                    if (a.rawScore < b.rawScore) {\n                                        return 1\n                                    } else if (a.rawScore > b.rawScore) {\n                                        return 0\n                                    }\n                                }\n                            } else {\n                                // we want the highest score first (sorting descending instead of ascending)\n                                if (a.rawScore < b.rawScore) {\n                                    return 1;\n                                } else if (a.rawScore > b.rawScore) {\n                                    return -1;\n                                } else {\n                                    return 0;\n                                }\n                            }\n\n\n                            return 0\n                        });\n\n                        resolve(lines);\n                    }\n                }\n            }\n        };\n    });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}