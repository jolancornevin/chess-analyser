{"ast":null,"code":"var _jsxFileName = \"/Users/jcornevin/Dev/Perso/chess-analyser/src/components/right-menu/right-menu.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { NewMove, resetEngineCache } from \"../types\";\nimport { engineEval } from \"./engine\";\nimport { Lines } from \"./lines\";\nimport { Moves } from \"./moves\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function RightMenu({\n  chess,\n  setFen,\n  setLastMove,\n  orientation,\n  setOrientation,\n  setShape\n}) {\n  _s();\n  const [moves, setMoves] = useState([]);\n  const [lines, setLines] = useState([]);\n\n  // Load a game\n  const onPGNChange = useCallback(async pgn => {\n    chess.loadPgn(pgn);\n    resetEngineCache();\n    const moves = [];\n    let index = 0;\n\n    // start computing every move.\n    for (const value of chess.history({\n      verbose: true\n    })) {\n      let _index = index;\n      moves.push(NewMove(_index, value, Math.floor(_index / 2) + 1));\n      index += 1;\n    }\n    setFen(chess.fen());\n    setMoves(moves);\n  }, [chess, setFen]);\n\n  // Load a move\n  const onMoveClick = useCallback(async move => {\n    setFen(move.fen);\n    setLastMove([move.cmove.from, move.cmove.to]);\n    setShape({\n      orig: move.bestMove.slice(0, 2),\n      dest: move.bestMove.slice(2, 4)\n    });\n    chess.load(move.fen);\n    setLines([]);\n    await engineEval(move.fen, 3).then(lines => setLines(lines));\n  }, [chess, setFen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        border: \"1px solid white\"\n      },\n      children: [\"PGN: \", /*#__PURE__*/_jsxDEV(\"textarea\", {\n        onChange: async e => await onPGNChange(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 22\n      }, this), \"Playing as \", orientation, \": \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: orientation === \"white\",\n        onChange: e => {\n          setOrientation(e.target.checked ? \"white\" : \"black\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 43\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8,\n        height: 700\n      },\n      children: [/*#__PURE__*/_jsxDEV(Lines, {\n        lines: lines\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Moves, {\n        _moves: moves,\n        onMoveClick: onMoveClick,\n        orientation: orientation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_s(RightMenu, \"RUZNJ41DH5L7t1R5SsGd/7sluZo=\");\n_c = RightMenu;\nvar _c;\n$RefreshReg$(_c, \"RightMenu\");","map":{"version":3,"names":["useCallback","useState","NewMove","resetEngineCache","engineEval","Lines","Moves","jsxDEV","_jsxDEV","RightMenu","chess","setFen","setLastMove","orientation","setOrientation","setShape","_s","moves","setMoves","lines","setLines","onPGNChange","pgn","loadPgn","index","value","history","verbose","_index","push","Math","floor","fen","onMoveClick","move","cmove","from","to","orig","bestMove","slice","dest","load","then","children","style","flex","border","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","marginTop","height","_moves","_c","$RefreshReg$"],"sources":["/Users/jcornevin/Dev/Perso/chess-analyser/src/components/right-menu/right-menu.tsx"],"sourcesContent":["import { useCallback, useState } from \"react\";\n\nimport { Chess } from 'chess.js';\nimport { DrawShape } from \"chessground/draw\";\nimport * as cg from 'chessground/types';\n\nimport { Line, Move, NewMove, resetEngineCache } from \"../types\";\nimport { engineEval } from \"./engine\";\nimport { Lines } from \"./lines\";\nimport { Moves } from \"./moves\";\n\ndeclare const colors: readonly [\"white\", \"black\"];\ndeclare type Color = typeof colors[number];\n\ninterface RightMenuProps {\n    chess: Chess;\n\n    setLastMove: React.Dispatch<React.SetStateAction<any[]>>;\n    setFen: React.Dispatch<React.SetStateAction<string>>;\n\n    orientation: Color;\n    setOrientation: React.Dispatch<React.SetStateAction<Color>>;\n\n    setShape: React.Dispatch<React.SetStateAction<DrawShape>>;\n}\n\nexport function RightMenu({chess, setFen, setLastMove, orientation, setOrientation, setShape }: RightMenuProps): JSX.Element {\n    const [moves, setMoves] = useState<Move[]>([]);\n    const [lines, setLines] = useState<Line[]>([]);\n\n    // Load a game\n    const onPGNChange = useCallback(async (pgn: string) => {\n        chess.loadPgn(pgn);\n        resetEngineCache();\n\n        const moves: Move[] = [];\n        let index = 0;\n\n        // start computing every move.\n        for (const value of chess.history({ verbose: true })) {\n            let _index = index;\n\n            moves.push(NewMove(_index, value, Math.floor(_index / 2) + 1));\n\n            index += 1;\n        }\n\n        setFen(chess.fen());\n        setMoves(moves);\n        \n    }, [chess, setFen]);\n\n    // Load a move\n    const onMoveClick = useCallback(async (move: Move) => {\n        setFen(move.fen);\n        setLastMove([move.cmove.from, move.cmove.to]);\n        setShape({ orig: move.bestMove.slice(0, 2) as cg.Key, dest: move.bestMove.slice(2, 4) as cg.Key });\n        \n        chess.load(move.fen);\n        setLines([]);\n        \n        await engineEval(move.fen, 3).then((lines) => setLines(lines));\n    }, [chess, setFen]);\n\n    return (\n        <div>\n            <div style={{ flex: 1, border: \"1px solid white\" }}>\n                {/* Fen: <input value={fen} onChange={e => setFen(e.target.value)} /> */}\n                PGN: <textarea onChange={async (e) => await onPGNChange(e.target.value)} />\n                Playing as {orientation}: <input type=\"checkbox\" checked={orientation === \"white\"} onChange={e => {setOrientation(e.target.checked ? \"white\": \"black\")}} />\n            </div>\n            <div style={{ marginTop: 8, height: 700}}>\n                <Lines lines={lines} />\n                <Moves _moves={moves} onMoveClick={onMoveClick} orientation={orientation} />\n            </div>            \n        </div>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}