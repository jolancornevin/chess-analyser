{"ast":null,"code":"import * as fen from './fen.js';\nimport { timer } from './util.js';\nexport function defaults() {\n  return {\n    pieces: fen.read(fen.initial),\n    orientation: 'white',\n    turnColor: 'white',\n    coordinates: true,\n    ranksPosition: 'right',\n    autoCastle: true,\n    viewOnly: false,\n    disableContextMenu: false,\n    addPieceZIndex: false,\n    blockTouchScroll: false,\n    pieceKey: false,\n    highlight: {\n      lastMove: true,\n      check: true\n    },\n    animation: {\n      enabled: true,\n      duration: 200\n    },\n    movable: {\n      free: true,\n      color: 'both',\n      showDests: true,\n      events: {},\n      rookCastle: true\n    },\n    premovable: {\n      enabled: true,\n      showDests: true,\n      castle: true,\n      events: {}\n    },\n    predroppable: {\n      enabled: false,\n      events: {}\n    },\n    draggable: {\n      enabled: true,\n      distance: 3,\n      autoDistance: true,\n      showGhost: true,\n      deleteOnDropOff: false\n    },\n    dropmode: {\n      active: false\n    },\n    selectable: {\n      enabled: true\n    },\n    stats: {\n      // on touchscreen, default to \"tap-tap\" moves\n      // instead of drag\n      dragged: !('ontouchstart' in window)\n    },\n    events: {},\n    drawable: {\n      enabled: true,\n      visible: true,\n      defaultSnapToValidMove: true,\n      eraseOnClick: true,\n      shapes: [],\n      autoShapes: [],\n      brushes: {\n        green: {\n          key: 'g',\n          color: '#15781B',\n          opacity: 1,\n          lineWidth: 10\n        },\n        red: {\n          key: 'r',\n          color: '#882020',\n          opacity: 1,\n          lineWidth: 10\n        },\n        blue: {\n          key: 'b',\n          color: '#003088',\n          opacity: 1,\n          lineWidth: 10\n        },\n        yellow: {\n          key: 'y',\n          color: '#e68f00',\n          opacity: 1,\n          lineWidth: 10\n        },\n        paleBlue: {\n          key: 'pb',\n          color: '#003088',\n          opacity: 0.4,\n          lineWidth: 15\n        },\n        paleGreen: {\n          key: 'pg',\n          color: '#15781B',\n          opacity: 0.4,\n          lineWidth: 15\n        },\n        paleRed: {\n          key: 'pr',\n          color: '#882020',\n          opacity: 0.4,\n          lineWidth: 15\n        },\n        paleGrey: {\n          key: 'pgr',\n          color: '#4a4a4a',\n          opacity: 0.35,\n          lineWidth: 15\n        }\n      },\n      prevSvgHash: ''\n    },\n    hold: timer()\n  };\n}","map":{"version":3,"names":["fen","timer","defaults","pieces","read","initial","orientation","turnColor","coordinates","ranksPosition","autoCastle","viewOnly","disableContextMenu","addPieceZIndex","blockTouchScroll","pieceKey","highlight","lastMove","check","animation","enabled","duration","movable","free","color","showDests","events","rookCastle","premovable","castle","predroppable","draggable","distance","autoDistance","showGhost","deleteOnDropOff","dropmode","active","selectable","stats","dragged","window","drawable","visible","defaultSnapToValidMove","eraseOnClick","shapes","autoShapes","brushes","green","key","opacity","lineWidth","red","blue","yellow","paleBlue","paleGreen","paleRed","paleGrey","prevSvgHash","hold"],"sources":["/Users/jcornevin/Dev/Perso/chess-analyser/node_modules/chessground/src/state.ts"],"sourcesContent":["import * as fen from './fen.js';\nimport { AnimCurrent } from './anim.js';\nimport { DragCurrent } from './drag.js';\nimport { Drawable } from './draw.js';\nimport { timer } from './util.js';\nimport * as cg from './types.js';\n\nexport interface HeadlessState {\n  pieces: cg.Pieces;\n  orientation: cg.Color; // board orientation. white | black\n  turnColor: cg.Color; // turn to play. white | black\n  check?: cg.Key; // square currently in check \"a2\"\n  lastMove?: cg.Key[]; // squares part of the last move [\"c3\"; \"c4\"]\n  selected?: cg.Key; // square currently selected \"a1\"\n  coordinates: boolean; // include coords attributes\n  ranksPosition: cg.RanksPosition; // position ranks on either side. left | right\n  autoCastle: boolean; // immediately complete the castle by moving the rook after king move\n  viewOnly: boolean; // don't bind events: the user will never be able to move pieces around\n  disableContextMenu: boolean; // because who needs a context menu on a chessboard\n  addPieceZIndex: boolean; // adds z-index values to pieces (for 3D)\n  addDimensionsCssVarsTo?: HTMLElement; // add --cg-width and --cg-height CSS vars containing the board's dimensions to this element\n  blockTouchScroll: boolean; // block scrolling via touch dragging on the board, e.g. for coordinate training\n  pieceKey: boolean; // add a data-key attribute to piece elements\n  highlight: {\n    lastMove: boolean; // add last-move class to squares\n    check: boolean; // add check class to squares\n  };\n  animation: {\n    enabled: boolean;\n    duration: number;\n    current?: AnimCurrent;\n  };\n  movable: {\n    free: boolean; // all moves are valid - board editor\n    color?: cg.Color | 'both'; // color that can move. white | black | both\n    dests?: cg.Dests; // valid moves. {\"a2\" [\"a3\" \"a4\"] \"b1\" [\"a3\" \"c3\"]}\n    showDests: boolean; // whether to add the move-dest class on squares\n    events: {\n      after?: (orig: cg.Key, dest: cg.Key, metadata: cg.MoveMetadata) => void; // called after the move has been played\n      afterNewPiece?: (role: cg.Role, key: cg.Key, metadata: cg.MoveMetadata) => void; // called after a new piece is dropped on the board\n    };\n    rookCastle: boolean; // castle by moving the king to the rook\n  };\n  premovable: {\n    enabled: boolean; // allow premoves for color that can not move\n    showDests: boolean; // whether to add the premove-dest class on squares\n    castle: boolean; // whether to allow king castle premoves\n    dests?: cg.Key[]; // premove destinations for the current selection\n    current?: cg.KeyPair; // keys of the current saved premove [\"e2\" \"e4\"]\n    events: {\n      set?: (orig: cg.Key, dest: cg.Key, metadata?: cg.SetPremoveMetadata) => void; // called after the premove has been set\n      unset?: () => void; // called after the premove has been unset\n    };\n  };\n  predroppable: {\n    enabled: boolean; // allow predrops for color that can not move\n    current?: {\n      // current saved predrop {role: 'knight'; key: 'e4'}\n      role: cg.Role;\n      key: cg.Key;\n    };\n    events: {\n      set?: (role: cg.Role, key: cg.Key) => void; // called after the predrop has been set\n      unset?: () => void; // called after the predrop has been unset\n    };\n  };\n  draggable: {\n    enabled: boolean; // allow moves & premoves to use drag'n drop\n    distance: number; // minimum distance to initiate a drag; in pixels\n    autoDistance: boolean; // lets chessground set distance to zero when user drags pieces\n    showGhost: boolean; // show ghost of piece being dragged\n    deleteOnDropOff: boolean; // delete a piece when it is dropped off the board\n    current?: DragCurrent;\n  };\n  dropmode: {\n    active: boolean;\n    piece?: cg.Piece;\n  };\n  selectable: {\n    // disable to enforce dragging over click-click move\n    enabled: boolean;\n  };\n  stats: {\n    // was last piece dragged or clicked?\n    // needs default to false for touch\n    dragged: boolean;\n    ctrlKey?: boolean;\n  };\n  events: {\n    change?: () => void; // called after the situation changes on the board\n    // called after a piece has been moved.\n    // capturedPiece is undefined or like {color: 'white'; 'role': 'queen'}\n    move?: (orig: cg.Key, dest: cg.Key, capturedPiece?: cg.Piece) => void;\n    dropNewPiece?: (piece: cg.Piece, key: cg.Key) => void;\n    select?: (key: cg.Key) => void; // called when a square is selected\n    insert?: (elements: cg.Elements) => void; // when the board DOM has been (re)inserted\n  };\n  drawable: Drawable;\n  exploding?: cg.Exploding;\n  hold: cg.Timer;\n}\n\nexport interface State extends HeadlessState {\n  dom: cg.Dom;\n}\n\nexport function defaults(): HeadlessState {\n  return {\n    pieces: fen.read(fen.initial),\n    orientation: 'white',\n    turnColor: 'white',\n    coordinates: true,\n    ranksPosition: 'right',\n    autoCastle: true,\n    viewOnly: false,\n    disableContextMenu: false,\n    addPieceZIndex: false,\n    blockTouchScroll: false,\n    pieceKey: false,\n    highlight: {\n      lastMove: true,\n      check: true,\n    },\n    animation: {\n      enabled: true,\n      duration: 200,\n    },\n    movable: {\n      free: true,\n      color: 'both',\n      showDests: true,\n      events: {},\n      rookCastle: true,\n    },\n    premovable: {\n      enabled: true,\n      showDests: true,\n      castle: true,\n      events: {},\n    },\n    predroppable: {\n      enabled: false,\n      events: {},\n    },\n    draggable: {\n      enabled: true,\n      distance: 3,\n      autoDistance: true,\n      showGhost: true,\n      deleteOnDropOff: false,\n    },\n    dropmode: {\n      active: false,\n    },\n    selectable: {\n      enabled: true,\n    },\n    stats: {\n      // on touchscreen, default to \"tap-tap\" moves\n      // instead of drag\n      dragged: !('ontouchstart' in window),\n    },\n    events: {},\n    drawable: {\n      enabled: true, // can draw\n      visible: true, // can view\n      defaultSnapToValidMove: true,\n      eraseOnClick: true,\n      shapes: [],\n      autoShapes: [],\n      brushes: {\n        green: { key: 'g', color: '#15781B', opacity: 1, lineWidth: 10 },\n        red: { key: 'r', color: '#882020', opacity: 1, lineWidth: 10 },\n        blue: { key: 'b', color: '#003088', opacity: 1, lineWidth: 10 },\n        yellow: { key: 'y', color: '#e68f00', opacity: 1, lineWidth: 10 },\n        paleBlue: { key: 'pb', color: '#003088', opacity: 0.4, lineWidth: 15 },\n        paleGreen: { key: 'pg', color: '#15781B', opacity: 0.4, lineWidth: 15 },\n        paleRed: { key: 'pr', color: '#882020', opacity: 0.4, lineWidth: 15 },\n        paleGrey: {\n          key: 'pgr',\n          color: '#4a4a4a',\n          opacity: 0.35,\n          lineWidth: 15,\n        },\n      },\n      prevSvgHash: '',\n    },\n    hold: timer(),\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}