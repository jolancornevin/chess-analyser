{"ast":null,"code":"var _jsxFileName = \"/Users/jcornevin/Dev/Perso/chess-analyser/src/components/right-menu/moves.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { Mutex } from \"async-mutex\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { ComputeMoveScore } from \"../types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mutex = new Mutex();\nfunction MoveUX({\n  move,\n  onMoveClick,\n  currentMove,\n  setCurrentMove,\n  orientation\n}) {\n  _s();\n  // const [move, setMove] = useState(_move);\n\n  useMemo(async () => {\n    // compute only our moves\n    if (orientation[0] !== move.cmove.color) {\n      return;\n    }\n\n    // const release = await mutex.acquire();\n\n    // const computedMove = await ComputeMoveScore(_move);\n\n    // setMove(computedMove);\n    // release();\n  }, []);\n  const noteMove = useCallback(move => {\n    if (!move.scoreDiff) {\n      if (orientation[0] !== move.cmove.color) {\n        return '';\n      }\n      return 'loading';\n    }\n    if (move.scoreDiff < 20) {\n      return '';\n    }\n    if (move.scoreDiff < 60) {\n      return move.scoreBefore > move.scoreAfter ? 'Meh' : '';\n    }\n    if (move.scoreDiff < 150) {\n      return move.scoreBefore > move.scoreAfter ? 'Oops' : '';\n    }\n    return move.scoreBefore > move.scoreAfter ? 'Blunter' : '';\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"50%\",\n      cursor: \"pointer\",\n      textAlign: \"left\",\n      backgroundColor: move.id === currentMove ? \"#8b8987\" : \"\"\n    },\n    onClick: async () => {\n      setCurrentMove(move.id);\n      await onMoveClick(move);\n    },\n    children: [move.number, \". \", move.to, \": \", noteMove(move)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n_s(MoveUX, \"yzZQCBRHzxLf1KcA4/pXDK4FB2Q=\");\n_c = MoveUX;\nexport function Moves({\n  _moves,\n  onMoveClick,\n  orientation\n}) {\n  _s2();\n  const [currentMove, setCurrentMove] = useState(0);\n  const iniMoves = Object.assign({}, ..._moves.map(move => ({\n    [move.id]: move\n  })));\n  const [moves, setMoves] = useState({});\n  useMemo(() => {\n    if (Object.keys(moves).length != Object.keys(iniMoves).length) {\n      // set the init state when props are changed\n      setMoves(iniMoves);\n    }\n    _moves.forEach((move, i) => {\n      // compute only our moves\n      if (orientation[0] === move.cmove.color) {\n        ComputeMoveScore(move).then(scoredMove => {\n          setMoves(prevMoves => {\n            console.log({\n              prevMoves,\n              scoredMove\n            });\n            return {\n              ...prevMoves,\n              [scoredMove.id]: scoredMove\n            };\n          });\n        });\n      }\n    });\n  }, [_moves, orientation, setMoves]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      overflowY: \"auto\",\n      height: 600,\n      marginTop: 8,\n      border: \"1px solid white\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        display: \"flex\",\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        width: \"100%\"\n      },\n      children: Object.values(moves).map((move, i) => {\n        // TODO hightlight current move + hotkey left and right to move from move to move\n        return /*#__PURE__*/_jsxDEV(MoveUX, {\n          move: move,\n          onMoveClick: onMoveClick,\n          currentMove: currentMove,\n          setCurrentMove: setCurrentMove,\n          orientation: orientation\n        }, move.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n_s2(Moves, \"JhH0kdJ3Gd6lIhlISgmODA8iTtU=\");\n_c2 = Moves;\nvar _c, _c2;\n$RefreshReg$(_c, \"MoveUX\");\n$RefreshReg$(_c2, \"Moves\");","map":{"version":3,"names":["Mutex","useCallback","useMemo","useState","ComputeMoveScore","jsxDEV","_jsxDEV","mutex","MoveUX","move","onMoveClick","currentMove","setCurrentMove","orientation","_s","cmove","color","noteMove","scoreDiff","scoreBefore","scoreAfter","style","width","cursor","textAlign","backgroundColor","id","onClick","children","number","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","Moves","_moves","_s2","iniMoves","Object","assign","map","moves","setMoves","keys","length","forEach","i","then","scoredMove","prevMoves","console","log","overflowY","height","marginTop","border","flex","display","flexDirection","flexWrap","values","_c2","$RefreshReg$"],"sources":["/Users/jcornevin/Dev/Perso/chess-analyser/src/components/right-menu/moves.tsx"],"sourcesContent":["import { Mutex } from \"async-mutex\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { ComputeMoveScore, Move } from \"../types\";\n\ninterface MoveProps {\n    move: Move;\n    onMoveClick: (move: Move) => Promise<void>\n\n    currentMove: number;\n    setCurrentMove: React.Dispatch<React.SetStateAction<number>>;\n\n    orientation: string;\n}\n\nconst mutex = new Mutex();\n\nfunction MoveUX({ move, onMoveClick, currentMove, setCurrentMove, orientation }: MoveProps): JSX.Element {    \n    // const [move, setMove] = useState(_move);\n    \n    useMemo(async () => {\n        // compute only our moves\n        if (orientation[0] !== move.cmove.color) {\n            return;\n        }\n\n        // const release = await mutex.acquire();\n        \n        // const computedMove = await ComputeMoveScore(_move);\n        \n        // setMove(computedMove);\n        // release();\n    }, []);\n    \n    const noteMove = useCallback((move: Move) => {\n        if (!move.scoreDiff) {\n            if (orientation[0] !== move.cmove.color) {\n                return '';\n            }\n\n            return 'loading';\n        }\n\n        if (move.scoreDiff < 20) {\n            return ''\n        }\n\n        if (move.scoreDiff < 60) {\n            return move.scoreBefore > move.scoreAfter ? 'Meh' : '';\n        }\n\n        if (move.scoreDiff < 150) {\n            return move.scoreBefore > move.scoreAfter ? 'Oops' : '';\n        }\n\n        return move.scoreBefore > move.scoreAfter ? 'Blunter' : '';\n    }, [])\n\n    return (\n        <div style={{ width: \"50%\", cursor: \"pointer\", textAlign: \"left\", backgroundColor: move.id === currentMove? \"#8b8987\": \"\" }} onClick={async () => {\n            setCurrentMove(move.id);\n            await onMoveClick(move)\n        }}>\n            {move.number}. {move.to}: {noteMove(move)} \n        </div>\n    );\n}\n\n\ninterface MovesProps {\n    _moves: Move[];\n    onMoveClick: (move: Move) => Promise<void>\n    orientation: string;\n}\n\nexport function Moves({ _moves, onMoveClick, orientation }: MovesProps): JSX.Element {\n    const [currentMove, setCurrentMove] = useState(0);\n\n    const iniMoves: Record<number, Move> = Object.assign({}, ..._moves.map((move) => ({ [move.id]: move })));\n\n    const [moves, setMoves] = useState<Record<number, Move>>({});\n\n    useMemo(() => { \n        if (Object.keys(moves).length != Object.keys(iniMoves).length) {\n            // set the init state when props are changed\n            setMoves(iniMoves);\n        }\n\n        _moves.forEach((move, i) => {\n            // compute only our moves\n            if (orientation[0] === move.cmove.color) {\n                ComputeMoveScore(move).then((scoredMove) => {\n                    setMoves((prevMoves) => { console.log({prevMoves, scoredMove});  return ({ ...prevMoves, [scoredMove.id]: scoredMove })});\n                });\n            }\n        });\n    }, [_moves, orientation, setMoves]);\n    \n    return (\n        <div style={{ overflowY: \"auto\", height: 600, marginTop: 8, border: \"1px solid white\",  }}>\n            <div style={{\n                flex: 1,\n                display: \"flex\",\n                flexDirection: \"row\",\n                flexWrap: \"wrap\",\n                width: \"100%\"\n            }}>\n                {Object.values(moves).map((move, i): JSX.Element => {\n                    // TODO hightlight current move + hotkey left and right to move from move to move\n                    return (\n                        <MoveUX key={move.id} move={move} onMoveClick={onMoveClick} currentMove={currentMove} setCurrentMove={setCurrentMove} orientation={orientation}/>\n                    );\n                })}\n            </div>\n        </div>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}