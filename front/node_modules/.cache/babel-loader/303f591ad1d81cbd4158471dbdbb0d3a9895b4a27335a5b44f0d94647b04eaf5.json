{"ast":null,"code":"const E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nconst E_ALREADY_LOCKED = new Error('mutex already locked');\nconst E_CANCELED = new Error('request for lock canceled');\nvar __awaiter$2 = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nclass Semaphore {\n  constructor(_value, _cancelError = E_CANCELED) {\n    this._value = _value;\n    this._cancelError = _cancelError;\n    this._queue = [];\n    this._weightedWaiters = [];\n  }\n  acquire(weight = 1, priority = 0) {\n    if (weight <= 0) throw new Error(`invalid weight ${weight}: must be positive`);\n    return new Promise((resolve, reject) => {\n      const task = {\n        resolve,\n        reject,\n        weight,\n        priority\n      };\n      const i = findIndexFromEnd(this._queue, other => priority <= other.priority);\n      if (i === -1 && weight <= this._value) {\n        // Needs immediate dispatch, skip the queue\n        this._dispatchItem(task);\n      } else {\n        this._queue.splice(i + 1, 0, task);\n      }\n    });\n  }\n  runExclusive(callback_1) {\n    return __awaiter$2(this, arguments, void 0, function* (callback, weight = 1, priority = 0) {\n      const [value, release] = yield this.acquire(weight, priority);\n      try {\n        return yield callback(value);\n      } finally {\n        release();\n      }\n    });\n  }\n  waitForUnlock(weight = 1, priority = 0) {\n    if (weight <= 0) throw new Error(`invalid weight ${weight}: must be positive`);\n    if (this._couldLockImmediately(weight, priority)) {\n      return Promise.resolve();\n    } else {\n      return new Promise(resolve => {\n        if (!this._weightedWaiters[weight - 1]) this._weightedWaiters[weight - 1] = [];\n        insertSorted(this._weightedWaiters[weight - 1], {\n          resolve,\n          priority\n        });\n      });\n    }\n  }\n  isLocked() {\n    return this._value <= 0;\n  }\n  getValue() {\n    return this._value;\n  }\n  setValue(value) {\n    this._value = value;\n    this._dispatchQueue();\n  }\n  release(weight = 1) {\n    if (weight <= 0) throw new Error(`invalid weight ${weight}: must be positive`);\n    this._value += weight;\n    this._dispatchQueue();\n  }\n  cancel() {\n    this._queue.forEach(entry => entry.reject(this._cancelError));\n    this._queue = [];\n  }\n  _dispatchQueue() {\n    this._drainUnlockWaiters();\n    while (this._queue.length > 0 && this._queue[0].weight <= this._value) {\n      this._dispatchItem(this._queue.shift());\n      this._drainUnlockWaiters();\n    }\n  }\n  _dispatchItem(item) {\n    const previousValue = this._value;\n    this._value -= item.weight;\n    item.resolve([previousValue, this._newReleaser(item.weight)]);\n  }\n  _newReleaser(weight) {\n    let called = false;\n    return () => {\n      if (called) return;\n      called = true;\n      this.release(weight);\n    };\n  }\n  _drainUnlockWaiters() {\n    if (this._queue.length === 0) {\n      for (let weight = this._value; weight > 0; weight--) {\n        const waiters = this._weightedWaiters[weight - 1];\n        if (!waiters) continue;\n        waiters.forEach(waiter => waiter.resolve());\n        this._weightedWaiters[weight - 1] = [];\n      }\n    } else {\n      const queuedPriority = this._queue[0].priority;\n      for (let weight = this._value; weight > 0; weight--) {\n        const waiters = this._weightedWaiters[weight - 1];\n        if (!waiters) continue;\n        const i = waiters.findIndex(waiter => waiter.priority <= queuedPriority);\n        (i === -1 ? waiters : waiters.splice(0, i)).forEach(waiter => waiter.resolve());\n      }\n    }\n  }\n  _couldLockImmediately(weight, priority) {\n    return (this._queue.length === 0 || this._queue[0].priority < priority) && weight <= this._value;\n  }\n}\nfunction insertSorted(a, v) {\n  const i = findIndexFromEnd(a, other => v.priority <= other.priority);\n  a.splice(i + 1, 0, v);\n}\nfunction findIndexFromEnd(a, predicate) {\n  for (let i = a.length - 1; i >= 0; i--) {\n    if (predicate(a[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nvar __awaiter$1 = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nclass Mutex {\n  constructor(cancelError) {\n    this._semaphore = new Semaphore(1, cancelError);\n  }\n  acquire() {\n    return __awaiter$1(this, arguments, void 0, function* (priority = 0) {\n      const [, releaser] = yield this._semaphore.acquire(1, priority);\n      return releaser;\n    });\n  }\n  runExclusive(callback, priority = 0) {\n    return this._semaphore.runExclusive(() => callback(), 1, priority);\n  }\n  isLocked() {\n    return this._semaphore.isLocked();\n  }\n  waitForUnlock(priority = 0) {\n    return this._semaphore.waitForUnlock(1, priority);\n  }\n  release() {\n    if (this._semaphore.isLocked()) this._semaphore.release();\n  }\n  cancel() {\n    return this._semaphore.cancel();\n  }\n}\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nfunction withTimeout(sync, timeout, timeoutError = E_TIMEOUT) {\n  return {\n    acquire: (weightOrPriority, priority) => {\n      let weight;\n      if (isSemaphore(sync)) {\n        weight = weightOrPriority;\n      } else {\n        weight = undefined;\n        priority = weightOrPriority;\n      }\n      if (weight !== undefined && weight <= 0) {\n        throw new Error(`invalid weight ${weight}: must be positive`);\n      }\n      return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n        let isTimeout = false;\n        const handle = setTimeout(() => {\n          isTimeout = true;\n          reject(timeoutError);\n        }, timeout);\n        try {\n          const ticket = yield isSemaphore(sync) ? sync.acquire(weight, priority) : sync.acquire(priority);\n          if (isTimeout) {\n            const release = Array.isArray(ticket) ? ticket[1] : ticket;\n            release();\n          } else {\n            clearTimeout(handle);\n            resolve(ticket);\n          }\n        } catch (e) {\n          if (!isTimeout) {\n            clearTimeout(handle);\n            reject(e);\n          }\n        }\n      }));\n    },\n    runExclusive(callback, weight, priority) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let release = () => undefined;\n        try {\n          const ticket = yield this.acquire(weight, priority);\n          if (Array.isArray(ticket)) {\n            release = ticket[1];\n            return yield callback(ticket[0]);\n          } else {\n            release = ticket;\n            return yield callback();\n          }\n        } finally {\n          release();\n        }\n      });\n    },\n    release(weight) {\n      sync.release(weight);\n    },\n    cancel() {\n      return sync.cancel();\n    },\n    waitForUnlock: (weightOrPriority, priority) => {\n      let weight;\n      if (isSemaphore(sync)) {\n        weight = weightOrPriority;\n      } else {\n        weight = undefined;\n        priority = weightOrPriority;\n      }\n      if (weight !== undefined && weight <= 0) {\n        throw new Error(`invalid weight ${weight}: must be positive`);\n      }\n      return new Promise((resolve, reject) => {\n        const handle = setTimeout(() => reject(timeoutError), timeout);\n        (isSemaphore(sync) ? sync.waitForUnlock(weight, priority) : sync.waitForUnlock(priority)).then(() => {\n          clearTimeout(handle);\n          resolve();\n        });\n      });\n    },\n    isLocked: () => sync.isLocked(),\n    getValue: () => sync.getValue(),\n    setValue: value => sync.setValue(value)\n  };\n}\nfunction isSemaphore(sync) {\n  return sync.getValue !== undefined;\n}\n\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync, alreadyAcquiredError = E_ALREADY_LOCKED) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return withTimeout(sync, 0, alreadyAcquiredError);\n}\nexport { E_ALREADY_LOCKED, E_CANCELED, E_TIMEOUT, Mutex, Semaphore, tryAcquire, withTimeout };","map":{"version":3,"names":["E_TIMEOUT","Error","E_ALREADY_LOCKED","E_CANCELED","__awaiter$2","undefined","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Semaphore","constructor","_value","_cancelError","_queue","_weightedWaiters","acquire","weight","priority","task","i","findIndexFromEnd","other","_dispatchItem","splice","runExclusive","callback_1","arguments","callback","release","waitForUnlock","_couldLockImmediately","insertSorted","isLocked","getValue","setValue","_dispatchQueue","cancel","forEach","entry","_drainUnlockWaiters","length","shift","item","previousValue","_newReleaser","called","waiters","waiter","queuedPriority","findIndex","a","v","predicate","__awaiter$1","Mutex","cancelError","_semaphore","releaser","withTimeout","sync","timeout","timeoutError","weightOrPriority","isSemaphore","isTimeout","handle","setTimeout","ticket","Array","isArray","clearTimeout","tryAcquire","alreadyAcquiredError"],"sources":["/Users/jcornevin/Dev/Perso/chess-analyser/node_modules/async-mutex/index.mjs"],"sourcesContent":["const E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nconst E_ALREADY_LOCKED = new Error('mutex already locked');\nconst E_CANCELED = new Error('request for lock canceled');\n\nvar __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Semaphore {\n    constructor(_value, _cancelError = E_CANCELED) {\n        this._value = _value;\n        this._cancelError = _cancelError;\n        this._queue = [];\n        this._weightedWaiters = [];\n    }\n    acquire(weight = 1, priority = 0) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        return new Promise((resolve, reject) => {\n            const task = { resolve, reject, weight, priority };\n            const i = findIndexFromEnd(this._queue, (other) => priority <= other.priority);\n            if (i === -1 && weight <= this._value) {\n                // Needs immediate dispatch, skip the queue\n                this._dispatchItem(task);\n            }\n            else {\n                this._queue.splice(i + 1, 0, task);\n            }\n        });\n    }\n    runExclusive(callback_1) {\n        return __awaiter$2(this, arguments, void 0, function* (callback, weight = 1, priority = 0) {\n            const [value, release] = yield this.acquire(weight, priority);\n            try {\n                return yield callback(value);\n            }\n            finally {\n                release();\n            }\n        });\n    }\n    waitForUnlock(weight = 1, priority = 0) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        if (this._couldLockImmediately(weight, priority)) {\n            return Promise.resolve();\n        }\n        else {\n            return new Promise((resolve) => {\n                if (!this._weightedWaiters[weight - 1])\n                    this._weightedWaiters[weight - 1] = [];\n                insertSorted(this._weightedWaiters[weight - 1], { resolve, priority });\n            });\n        }\n    }\n    isLocked() {\n        return this._value <= 0;\n    }\n    getValue() {\n        return this._value;\n    }\n    setValue(value) {\n        this._value = value;\n        this._dispatchQueue();\n    }\n    release(weight = 1) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        this._value += weight;\n        this._dispatchQueue();\n    }\n    cancel() {\n        this._queue.forEach((entry) => entry.reject(this._cancelError));\n        this._queue = [];\n    }\n    _dispatchQueue() {\n        this._drainUnlockWaiters();\n        while (this._queue.length > 0 && this._queue[0].weight <= this._value) {\n            this._dispatchItem(this._queue.shift());\n            this._drainUnlockWaiters();\n        }\n    }\n    _dispatchItem(item) {\n        const previousValue = this._value;\n        this._value -= item.weight;\n        item.resolve([previousValue, this._newReleaser(item.weight)]);\n    }\n    _newReleaser(weight) {\n        let called = false;\n        return () => {\n            if (called)\n                return;\n            called = true;\n            this.release(weight);\n        };\n    }\n    _drainUnlockWaiters() {\n        if (this._queue.length === 0) {\n            for (let weight = this._value; weight > 0; weight--) {\n                const waiters = this._weightedWaiters[weight - 1];\n                if (!waiters)\n                    continue;\n                waiters.forEach((waiter) => waiter.resolve());\n                this._weightedWaiters[weight - 1] = [];\n            }\n        }\n        else {\n            const queuedPriority = this._queue[0].priority;\n            for (let weight = this._value; weight > 0; weight--) {\n                const waiters = this._weightedWaiters[weight - 1];\n                if (!waiters)\n                    continue;\n                const i = waiters.findIndex((waiter) => waiter.priority <= queuedPriority);\n                (i === -1 ? waiters : waiters.splice(0, i))\n                    .forEach((waiter => waiter.resolve()));\n            }\n        }\n    }\n    _couldLockImmediately(weight, priority) {\n        return (this._queue.length === 0 || this._queue[0].priority < priority) &&\n            weight <= this._value;\n    }\n}\nfunction insertSorted(a, v) {\n    const i = findIndexFromEnd(a, (other) => v.priority <= other.priority);\n    a.splice(i + 1, 0, v);\n}\nfunction findIndexFromEnd(a, predicate) {\n    for (let i = a.length - 1; i >= 0; i--) {\n        if (predicate(a[i])) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nvar __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Mutex {\n    constructor(cancelError) {\n        this._semaphore = new Semaphore(1, cancelError);\n    }\n    acquire() {\n        return __awaiter$1(this, arguments, void 0, function* (priority = 0) {\n            const [, releaser] = yield this._semaphore.acquire(1, priority);\n            return releaser;\n        });\n    }\n    runExclusive(callback, priority = 0) {\n        return this._semaphore.runExclusive(() => callback(), 1, priority);\n    }\n    isLocked() {\n        return this._semaphore.isLocked();\n    }\n    waitForUnlock(priority = 0) {\n        return this._semaphore.waitForUnlock(1, priority);\n    }\n    release() {\n        if (this._semaphore.isLocked())\n            this._semaphore.release();\n    }\n    cancel() {\n        return this._semaphore.cancel();\n    }\n}\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nfunction withTimeout(sync, timeout, timeoutError = E_TIMEOUT) {\n    return {\n        acquire: (weightOrPriority, priority) => {\n            let weight;\n            if (isSemaphore(sync)) {\n                weight = weightOrPriority;\n            }\n            else {\n                weight = undefined;\n                priority = weightOrPriority;\n            }\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(`invalid weight ${weight}: must be positive`);\n            }\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                let isTimeout = false;\n                const handle = setTimeout(() => {\n                    isTimeout = true;\n                    reject(timeoutError);\n                }, timeout);\n                try {\n                    const ticket = yield (isSemaphore(sync)\n                        ? sync.acquire(weight, priority)\n                        : sync.acquire(priority));\n                    if (isTimeout) {\n                        const release = Array.isArray(ticket) ? ticket[1] : ticket;\n                        release();\n                    }\n                    else {\n                        clearTimeout(handle);\n                        resolve(ticket);\n                    }\n                }\n                catch (e) {\n                    if (!isTimeout) {\n                        clearTimeout(handle);\n                        reject(e);\n                    }\n                }\n            }));\n        },\n        runExclusive(callback, weight, priority) {\n            return __awaiter(this, void 0, void 0, function* () {\n                let release = () => undefined;\n                try {\n                    const ticket = yield this.acquire(weight, priority);\n                    if (Array.isArray(ticket)) {\n                        release = ticket[1];\n                        return yield callback(ticket[0]);\n                    }\n                    else {\n                        release = ticket;\n                        return yield callback();\n                    }\n                }\n                finally {\n                    release();\n                }\n            });\n        },\n        release(weight) {\n            sync.release(weight);\n        },\n        cancel() {\n            return sync.cancel();\n        },\n        waitForUnlock: (weightOrPriority, priority) => {\n            let weight;\n            if (isSemaphore(sync)) {\n                weight = weightOrPriority;\n            }\n            else {\n                weight = undefined;\n                priority = weightOrPriority;\n            }\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(`invalid weight ${weight}: must be positive`);\n            }\n            return new Promise((resolve, reject) => {\n                const handle = setTimeout(() => reject(timeoutError), timeout);\n                (isSemaphore(sync)\n                    ? sync.waitForUnlock(weight, priority)\n                    : sync.waitForUnlock(priority)).then(() => {\n                    clearTimeout(handle);\n                    resolve();\n                });\n            });\n        },\n        isLocked: () => sync.isLocked(),\n        getValue: () => sync.getValue(),\n        setValue: (value) => sync.setValue(value),\n    };\n}\nfunction isSemaphore(sync) {\n    return sync.getValue !== undefined;\n}\n\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync, alreadyAcquiredError = E_ALREADY_LOCKED) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return withTimeout(sync, 0, alreadyAcquiredError);\n}\n\nexport { E_ALREADY_LOCKED, E_CANCELED, E_TIMEOUT, Mutex, Semaphore, tryAcquire, withTimeout };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}